# -*- coding: utf-8 -*-
"""handwritingVideo2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lYJXta_BED62Tl0_Dnj6D_4xQnsmqQzn
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report

# Descargar MNIST desde OpenML
mnist = fetch_openml('mnist_784', version=1, as_frame=False)
X, y = mnist["data"], mnist["target"].astype("int32")

# Visualización rápida
def plot_images(images, labels):
    n_cols = min(10, len(images))
    n_rows = len(images) // n_cols
    fig = plt.figure(figsize=(8, 8))
    for i in range(n_rows * n_cols):
        sp = fig.add_subplot(n_rows, n_cols, i + 1)
        plt.axis("off")
        plt.imshow(images[i], cmap=plt.cm.gray)
        sp.set_title(str(labels[i]))

    plt.show()

# Mostrar imágenes aleatorias
p = np.random.permutation(len(X))[:50]
plot_images(X[p].reshape(-1, 28, 28), y[p])

# MultinomialNB requiere enteros positivos → Escalar 0-255
X = X.astype("int32")

# División entrenamiento/prueba
train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.2, random_state=42)

# Entrenar clasificador
cls = MultinomialNB()
cls.fit(train_X, train_y)
print("Score:", cls.score(test_X, test_y))

# Clasificación y reporte
predictions = cls.predict(test_X)
print(classification_report(test_y, predictions))

# Visualizar predicciones
p = np.random.permutation(len(test_X))[:50]
plot_images(test_X[p].reshape(-1, 28, 28), predictions[p])

from sklearn.metrics import confusion_matrix
import seaborn as sns

# Calcular matriz de confusión
cm = confusion_matrix(test_y, predictions)

# Visualizar con heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Reds', xticklabels=np.arange(10), yticklabels=np.arange(10))
plt.xlabel('Predichos')
plt.ylabel('Verdaderos')
plt.title('Matriz de Confusion')
plt.show()